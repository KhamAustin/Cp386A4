
//Importing packages
#include <stdio.h>
#include <pthread.h>
#include <string.h>
#include <sys/stat.h>
#include <time.h>
#include <unistd.h>
#include <ctype.h>
#include <semaphore.h>
#include <stdbool.h>
#include <stdlib.h>


int main(int ac, char *a[] )// main
{
    if(ac == 1) {
        printf("Need More INT\n");
        return 1;
    }

    l_a_r(a_c, a); // calling
    l_cus_res(r_amount); // calling

    run_p(); // run


    return 0;// return
}


/////////////////////////////////////////////
void run_p()

{
    while(r)

    {
        printf("Command ");


        char *inp = s_l();
                char **args = plt_str_ar(inp, "");


        int a_len = len_str_splt_arr(inp, "");



        if(strcmp(args[0], "rq") == 0) {


            if(a_len == 2 + r_amount)
            {

                int c_ind = at(a[1]);
                int r_r[r_amount];



                for(int x = 0; x < r_amount; x++)
                    r_r[i] = at(a[2 + i]);

                req_res_comm(c_i, r_r);

            }





        }

        else if(strcmp(args[0], "r l") ==0)
        {

        }
            if(a_len == 2 +r_amount)
            {

                int c_i = at(a[1]);
                int r_r[r_amount];

                for(int z = 0; z < r_amount; i++)

                    r_r[i] = at(a[2 + i]);

                rel_res_comm(c_i, r_r);

            }


        }
    else if(strcmp(a[0], "runn") == 0)
    {

    	run_com();


        }

    else if(strcmp(a[0], "statuss") == 0)
    {
            s_com();


    }
}

//////////////////////////////////////////////
void l_cus_res();

{

    char l[1000];
    int x = 0;
    FILE *Sample = fopen(Sample, "r");

   .
    while (fgets(l, sizeof(l), Sample) != NULL){
    	c_amount=  c_amount + 1;
    }


    c_res = malloc(sizeof(struct C) *c_amount);
    fseek(Sample, 0, SEEK_SET);



    while (fgets(l, sizeof(l), Sample) != NULL)
    {
        struct C cust;


        cust.max_r = spt_i_ar(l, ",");
        cust.allo_r = malloc(sizeof(int) * r_amount);
        cust.need_r = spt_i_ar(l, ",");
        cust.fin = false;
        cust.id_r = x;

        c_res[i] = cus;
        x++; // incrementing
    }

    fclose(Sample); //closing fle
}//end
////////////////////////////////////////////////
void l_a_r(int c, char *a[]); //function load aval res
{
	a_resources = (int *)malloc((count - 1) * sizeof(int));

    for (int i = 1; i < count; i++){
    	//travesring


    	a_resources[i - 1] = at(a[i]);
    }


    r_amount = count-1; // minus 1
}
///////////////////////////////////////////////////
const char *Sample = "sample4_in.txt"; //hard coding file name

bool r = true; //running is true





//////////////////////////////////////
struct C {//customer


	int *allo_r; // allocated resources
    int *need_r; // need resources
    int *max_r; //Max resources
    int id_r; // id resources


    bool fin = true;
};


struct C *c_resources;


//integers
int *a_resources; //aval resources
int r_amount; //resource amou
int c_amount;


//voids
void l_a_r(int c, char *a[]);
void l_cus_res();
void run_p();
void req_res_comm(int cust_ind, int *req_res);
void rel_res_comm(int cus_ind, int *rel_res);
void run_com();
void *run_com_func();
void s_comm();

//chars
char **splt_str_ar(char *inp, char *del);
char *s_l();

//integers
int *spt_i_ar(char *inp, char *del);
int len_i_ar(int *arr);
int len_str_splt_arr(char *inp, char *de);
int *array_addition(int *wrk, int *allo);

//boolean
bool need_work_comparison(int *nd, int *wrk);




